
D0003_Lab3-2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000762  000007f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000762  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000022d  00800118  00800118  0000080e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000080e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000840  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000880  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000123f  00000000  00000000  00000930  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b3a  00000000  00000000  00001b6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006e3  00000000  00000000  000026a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000248  00000000  00000000  00002d8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a2  00000000  00000000  00002fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000904  00000000  00000000  00003576  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00003e7a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 db 02 	jmp	0x5b6	; 0x5b6 <__vector_3>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 00 03 	jmp	0x600	; 0x600 <__vector_7>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e2 e6       	ldi	r30, 0x62	; 98
  70:	f7 e0       	ldi	r31, 0x07	; 7
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a8 31       	cpi	r26, 0x18	; 24
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	23 e0       	ldi	r18, 0x03	; 3
  80:	a8 e1       	ldi	r26, 0x18	; 24
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	a5 34       	cpi	r26, 0x45	; 69
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 8c 01 	call	0x318	; 0x318 <main>
  92:	0c 94 af 03 	jmp	0x75e	; 0x75e <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <LCDInit>:


void LCDInit(void) {
	
	//Set Lowpower Waveform, no frame interrupt, no blanking. LCD Enable
	LCDCRA = (1 << LCDAB) | (1 << LCDEN);
  9a:	80 ec       	ldi	r24, 0xC0	; 192
  9c:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
	
	//drive time 300 microseconds, contrast control voltage 3.35 V.
	LCDCCR = (1 << LCDCC0) | (1 << LCDCC1) | (1 << LCDCC2) | (1 << LCDCC3);
  a0:	8f e0       	ldi	r24, 0x0F	; 15
  a2:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__DATA_REGION_ORIGIN__+0x87>
	
	//external asynchronous clock source, 1/3 bias, 1/4 duty cycle, 25 segments.
	LCDCRB = (1 << LCDCS) | (1<< LCDMUX0) | (1<< LCDMUX1) | (1 <<LCDPM0) | (1 <<LCDPM1) | (1 <<LCDPM2);
  a6:	87 eb       	ldi	r24, 0xB7	; 183
  a8:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
	
	//prescaler setting N=16, clock divider setting D=8
	LCDFRR = (1 << LCDCD0) | (1 << LCDCD1) | (1 << LCDCD2);
  ac:	87 e0       	ldi	r24, 0x07	; 7
  ae:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__DATA_REGION_ORIGIN__+0x86>
  b2:	08 95       	ret

000000b4 <writeChar>:



//Will write the Char on the screen as position pos.
void writeChar(char ch, int pos)
{
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
  b8:	cd b7       	in	r28, 0x3d	; 61
  ba:	de b7       	in	r29, 0x3e	; 62
  bc:	64 97       	sbiw	r28, 0x14	; 20
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	f8 94       	cli
  c2:	de bf       	out	0x3e, r29	; 62
  c4:	0f be       	out	0x3f, r0	; 63
  c6:	cd bf       	out	0x3d, r28	; 61
	//Nibbel the number that is sent to the LCD.
	uint8_t nibbleNumber = 0x0;
	
	
	//SCC Table with the numbers from 0 to 9.
	uint16_t sccTable[10] = {0x1551, 0x0110, 0x1e11, 0x1B11, 0x0B50, 0x1B41, 0x1F41, 0x0111, 0x1F51, 0x0B51};
  c8:	94 e1       	ldi	r25, 0x14	; 20
  ca:	e4 e0       	ldi	r30, 0x04	; 4
  cc:	f1 e0       	ldi	r31, 0x01	; 1
  ce:	de 01       	movw	r26, r28
  d0:	11 96       	adiw	r26, 0x01	; 1
  d2:	01 90       	ld	r0, Z+
  d4:	0d 92       	st	X+, r0
  d6:	9a 95       	dec	r25
  d8:	e1 f7       	brne	.-8      	; 0xd2 <writeChar+0x1e>
	
	
	// Check if position is outside or not.
	if (pos < 0 || pos > 5) {
  da:	66 30       	cpi	r22, 0x06	; 6
  dc:	71 05       	cpc	r23, r1
  de:	68 f5       	brcc	.+90     	; 0x13a <writeChar+0x86>
	
	// Check if it is a 0 to 9.
	if (ch >= '0' || ch <= '9')
	{
		//Get the number out of the array.
		number = sccTable[ch - '0'];
  e0:	e8 2f       	mov	r30, r24
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	f0 97       	sbiw	r30, 0x30	; 48
  e6:	ee 0f       	add	r30, r30
  e8:	ff 1f       	adc	r31, r31
  ea:	ec 0f       	add	r30, r28
  ec:	fd 1f       	adc	r31, r29
  ee:	21 81       	ldd	r18, Z+1	; 0x01
  f0:	32 81       	ldd	r19, Z+2	; 0x02
	
	
	
	
	//Point to the right position. Divide by 2 you can say.
	lcdaddr += pos >> 1;
  f2:	fb 01       	movw	r30, r22
  f4:	f5 95       	asr	r31
  f6:	e7 95       	ror	r30
  f8:	e4 51       	subi	r30, 0x14	; 20
  fa:	ff 4f       	sbci	r31, 0xFF	; 255
	
	
	//Check if it is odd or even possition.
	if (pos % 2 == 0)
  fc:	db 01       	movw	r26, r22
  fe:	a1 70       	andi	r26, 0x01	; 1
 100:	bb 27       	eor	r27, r27
 102:	60 ff       	sbrs	r22, 0
 104:	02 c0       	rjmp	.+4      	; 0x10a <writeChar+0x56>
	{
		mask = 0xf0;
	}
	else
	{
		mask = 0x0f;
 106:	6f e0       	ldi	r22, 0x0F	; 15
 108:	01 c0       	rjmp	.+2      	; 0x10c <writeChar+0x58>
	
	
	//Check if it is odd or even possition.
	if (pos % 2 == 0)
	{
		mask = 0xf0;
 10a:	60 ef       	ldi	r22, 0xF0	; 240
 10c:	af 01       	movw	r20, r30
 10e:	4c 5e       	subi	r20, 0xEC	; 236
 110:	5f 4f       	sbci	r21, 0xFF	; 255
	
	//Will place out the nibbels on the right LCD address for the number.
	for (int i = 0; i < 4; i++ )
	{
		//Masking the smallest byte.
		nibbleNumber = number & 0xf;
 112:	82 2f       	mov	r24, r18
 114:	8f 70       	andi	r24, 0x0F	; 15
		number = number >> 4;
 116:	32 95       	swap	r19
 118:	22 95       	swap	r18
 11a:	2f 70       	andi	r18, 0x0F	; 15
 11c:	23 27       	eor	r18, r19
 11e:	3f 70       	andi	r19, 0x0F	; 15
 120:	23 27       	eor	r18, r19
		
		
		//Check position.
		if(pos % 2 != 0)
 122:	10 97       	sbiw	r26, 0x00	; 0
 124:	11 f0       	breq	.+4      	; 0x12a <writeChar+0x76>
		{
			//Shift the nibble to the right pos.
			nibbleNumber = nibbleNumber << 4;
 126:	82 95       	swap	r24
 128:	80 7f       	andi	r24, 0xF0	; 240
		}
		
		//Send the nibble.
		*lcdaddr = (*lcdaddr & mask) | nibbleNumber;
 12a:	90 81       	ld	r25, Z
 12c:	96 23       	and	r25, r22
 12e:	89 2b       	or	r24, r25
 130:	80 83       	st	Z, r24
		
		lcdaddr += 5;
 132:	35 96       	adiw	r30, 0x05	; 5
		mask = 0x0f;
	}
	
	
	//Will place out the nibbels on the right LCD address for the number.
	for (int i = 0; i < 4; i++ )
 134:	4e 17       	cp	r20, r30
 136:	5f 07       	cpc	r21, r31
 138:	61 f7       	brne	.-40     	; 0x112 <writeChar+0x5e>
		
		lcdaddr += 5;
		
	}
	
}
 13a:	64 96       	adiw	r28, 0x14	; 20
 13c:	0f b6       	in	r0, 0x3f	; 63
 13e:	f8 94       	cli
 140:	de bf       	out	0x3e, r29	; 62
 142:	0f be       	out	0x3f, r0	; 63
 144:	cd bf       	out	0x3d, r28	; 61
 146:	df 91       	pop	r29
 148:	cf 91       	pop	r28
 14a:	08 95       	ret

0000014c <is_prime>:

//Calculates the prime.
bool is_prime(long i)
{
 14c:	cf 92       	push	r12
 14e:	df 92       	push	r13
 150:	ef 92       	push	r14
 152:	ff 92       	push	r15
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
 158:	6b 01       	movw	r12, r22
 15a:	7c 01       	movw	r14, r24
	//Loop all the numbers under i and try to divide it with them.
	for(int n = 2; n < i; n++)
 15c:	83 e0       	ldi	r24, 0x03	; 3
 15e:	c8 16       	cp	r12, r24
 160:	d1 04       	cpc	r13, r1
 162:	e1 04       	cpc	r14, r1
 164:	f1 04       	cpc	r15, r1
 166:	74 f1       	brlt	.+92     	; 0x1c4 <is_prime+0x78>
	{
		// Found number it can divide with.
		if(i % n == 0)
 168:	d7 01       	movw	r26, r14
 16a:	c6 01       	movw	r24, r12
 16c:	81 70       	andi	r24, 0x01	; 1
 16e:	99 27       	eor	r25, r25
 170:	aa 27       	eor	r26, r26
 172:	b0 78       	andi	r27, 0x80	; 128
 174:	bb 23       	and	r27, r27
 176:	54 f4       	brge	.+20     	; 0x18c <is_prime+0x40>
 178:	01 97       	sbiw	r24, 0x01	; 1
 17a:	a1 09       	sbc	r26, r1
 17c:	b1 09       	sbc	r27, r1
 17e:	8e 6f       	ori	r24, 0xFE	; 254
 180:	9f 6f       	ori	r25, 0xFF	; 255
 182:	af 6f       	ori	r26, 0xFF	; 255
 184:	bf 6f       	ori	r27, 0xFF	; 255
 186:	01 96       	adiw	r24, 0x01	; 1
 188:	a1 1d       	adc	r26, r1
 18a:	b1 1d       	adc	r27, r1
 18c:	89 2b       	or	r24, r25
 18e:	8a 2b       	or	r24, r26
 190:	8b 2b       	or	r24, r27
 192:	d1 f0       	breq	.+52     	; 0x1c8 <is_prime+0x7c>
 194:	c2 e0       	ldi	r28, 0x02	; 2
 196:	d0 e0       	ldi	r29, 0x00	; 0
 198:	08 c0       	rjmp	.+16     	; 0x1aa <is_prime+0x5e>
 19a:	c7 01       	movw	r24, r14
 19c:	b6 01       	movw	r22, r12
 19e:	0e 94 2d 03 	call	0x65a	; 0x65a <__divmodsi4>
 1a2:	67 2b       	or	r22, r23
 1a4:	68 2b       	or	r22, r24
 1a6:	69 2b       	or	r22, r25
 1a8:	89 f0       	breq	.+34     	; 0x1cc <is_prime+0x80>

//Calculates the prime.
bool is_prime(long i)
{
	//Loop all the numbers under i and try to divide it with them.
	for(int n = 2; n < i; n++)
 1aa:	21 96       	adiw	r28, 0x01	; 1
 1ac:	9e 01       	movw	r18, r28
 1ae:	0d 2e       	mov	r0, r29
 1b0:	00 0c       	add	r0, r0
 1b2:	44 0b       	sbc	r20, r20
 1b4:	55 0b       	sbc	r21, r21
 1b6:	2c 15       	cp	r18, r12
 1b8:	3d 05       	cpc	r19, r13
 1ba:	4e 05       	cpc	r20, r14
 1bc:	5f 05       	cpc	r21, r15
 1be:	6c f3       	brlt	.-38     	; 0x19a <is_prime+0x4e>
		{
			return false;
		}
		
	}
	return true;
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	05 c0       	rjmp	.+10     	; 0x1ce <is_prime+0x82>
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	03 c0       	rjmp	.+6      	; 0x1ce <is_prime+0x82>
	for(int n = 2; n < i; n++)
	{
		// Found number it can divide with.
		if(i % n == 0)
		{
			return false;
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	01 c0       	rjmp	.+2      	; 0x1ce <is_prime+0x82>
 1cc:	80 e0       	ldi	r24, 0x00	; 0
		}
		
	}
	return true;
	
}
 1ce:	df 91       	pop	r29
 1d0:	cf 91       	pop	r28
 1d2:	ff 90       	pop	r15
 1d4:	ef 90       	pop	r14
 1d6:	df 90       	pop	r13
 1d8:	cf 90       	pop	r12
 1da:	08 95       	ret

000001dc <printAt>:



void printAt(long num, int pos) {
 1dc:	8f 92       	push	r8
 1de:	9f 92       	push	r9
 1e0:	af 92       	push	r10
 1e2:	bf 92       	push	r11
 1e4:	cf 92       	push	r12
 1e6:	df 92       	push	r13
 1e8:	ef 92       	push	r14
 1ea:	ff 92       	push	r15
 1ec:	cf 93       	push	r28
 1ee:	df 93       	push	r29
 1f0:	4b 01       	movw	r8, r22
 1f2:	5c 01       	movw	r10, r24
 1f4:	ea 01       	movw	r28, r20
	
	//lock the mutex
	lock(&mutexPrime);
 1f6:	88 e1       	ldi	r24, 0x18	; 24
 1f8:	91 e0       	ldi	r25, 0x01	; 1
 1fa:	0e 94 8f 02 	call	0x51e	; 0x51e <lock>
	
	pp = pos;
 1fe:	d0 93 23 01 	sts	0x0123, r29	; 0x800123 <pp+0x1>
 202:	c0 93 22 01 	sts	0x0122, r28	; 0x800122 <pp>
	writeChar( (num % 100) / 10 + '0', pp);
 206:	c5 01       	movw	r24, r10
 208:	b4 01       	movw	r22, r8
 20a:	24 e6       	ldi	r18, 0x64	; 100
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	40 e0       	ldi	r20, 0x00	; 0
 210:	50 e0       	ldi	r21, 0x00	; 0
 212:	0e 94 2d 03 	call	0x65a	; 0x65a <__divmodsi4>
 216:	0f 2e       	mov	r0, r31
 218:	fa e0       	ldi	r31, 0x0A	; 10
 21a:	cf 2e       	mov	r12, r31
 21c:	d1 2c       	mov	r13, r1
 21e:	e1 2c       	mov	r14, r1
 220:	f1 2c       	mov	r15, r1
 222:	f0 2d       	mov	r31, r0
 224:	a7 01       	movw	r20, r14
 226:	96 01       	movw	r18, r12
 228:	0e 94 2d 03 	call	0x65a	; 0x65a <__divmodsi4>
 22c:	be 01       	movw	r22, r28
 22e:	80 e3       	ldi	r24, 0x30	; 48
 230:	82 0f       	add	r24, r18
 232:	0e 94 5a 00 	call	0xb4	; 0xb4 <writeChar>
	pp++;
 236:	c0 91 22 01 	lds	r28, 0x0122	; 0x800122 <pp>
 23a:	d0 91 23 01 	lds	r29, 0x0123	; 0x800123 <pp+0x1>
 23e:	21 96       	adiw	r28, 0x01	; 1
 240:	d0 93 23 01 	sts	0x0123, r29	; 0x800123 <pp+0x1>
 244:	c0 93 22 01 	sts	0x0122, r28	; 0x800122 <pp>
	writeChar( num % 10 + '0', pp);
 248:	c5 01       	movw	r24, r10
 24a:	b4 01       	movw	r22, r8
 24c:	a7 01       	movw	r20, r14
 24e:	96 01       	movw	r18, r12
 250:	0e 94 2d 03 	call	0x65a	; 0x65a <__divmodsi4>
 254:	86 2f       	mov	r24, r22
 256:	be 01       	movw	r22, r28
 258:	80 5d       	subi	r24, 0xD0	; 208
 25a:	0e 94 5a 00 	call	0xb4	; 0xb4 <writeChar>
	
	//Unlock the mutex
	unlock(&mutexPrime);
 25e:	88 e1       	ldi	r24, 0x18	; 24
 260:	91 e0       	ldi	r25, 0x01	; 1
 262:	0e 94 b6 02 	call	0x56c	; 0x56c <unlock>
}
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	ff 90       	pop	r15
 26c:	ef 90       	pop	r14
 26e:	df 90       	pop	r13
 270:	cf 90       	pop	r12
 272:	bf 90       	pop	r11
 274:	af 90       	pop	r10
 276:	9f 90       	pop	r9
 278:	8f 90       	pop	r8
 27a:	08 95       	ret

0000027c <button>:
}


//Activates lights on the LCD by using the joystick.
void button(int pos)
{
 27c:	8c 01       	movw	r16, r24
	//Set the port 7 of port B to 1.
	PORTB = 0x80;
 27e:	80 e8       	ldi	r24, 0x80	; 128
 280:	85 b9       	out	0x05, r24	; 5
	
	// Counter on what number to print.
	int counter = 0;
	
	//Hold flag
	bool notPressed = true;
 282:	81 e0       	ldi	r24, 0x01	; 1
{
	//Set the port 7 of port B to 1.
	PORTB = 0x80;
	
	// Counter on what number to print.
	int counter = 0;
 284:	c0 e0       	ldi	r28, 0x00	; 0
 286:	d0 e0       	ldi	r29, 0x00	; 0
		}
		
		// Read that you released the Joystick.
		else if(PINB >> 7 == 1)
		{
			notPressed = true;
 288:	ee 24       	eor	r14, r14
 28a:	e3 94       	inc	r14
	while(true)
	{
		//Read the pin as it is a zero.
		if(notPressed && PINB >> 7 == 0)
		{
			notPressed = false;
 28c:	f1 2c       	mov	r15, r1
	
	//Busy waiting.
	while(true)
	{
		//Read the pin as it is a zero.
		if(notPressed && PINB >> 7 == 0)
 28e:	88 23       	and	r24, r24
 290:	69 f0       	breq	.+26     	; 0x2ac <button+0x30>
 292:	1f 99       	sbic	0x03, 7	; 3
 294:	0b c0       	rjmp	.+22     	; 0x2ac <button+0x30>
		{
			notPressed = false;
			counter++;
 296:	21 96       	adiw	r28, 0x01	; 1
			printAt(counter, pos);
 298:	be 01       	movw	r22, r28
 29a:	0d 2e       	mov	r0, r29
 29c:	00 0c       	add	r0, r0
 29e:	88 0b       	sbc	r24, r24
 2a0:	99 0b       	sbc	r25, r25
 2a2:	a8 01       	movw	r20, r16
 2a4:	0e 94 ee 00 	call	0x1dc	; 0x1dc <printAt>
	while(true)
	{
		//Read the pin as it is a zero.
		if(notPressed && PINB >> 7 == 0)
		{
			notPressed = false;
 2a8:	8f 2d       	mov	r24, r15
			counter++;
			printAt(counter, pos);
 2aa:	f1 cf       	rjmp	.-30     	; 0x28e <button+0x12>
		}
		
		// Read that you released the Joystick.
		else if(PINB >> 7 == 1)
 2ac:	1f 9b       	sbis	0x03, 7	; 3
 2ae:	ef cf       	rjmp	.-34     	; 0x28e <button+0x12>
		{
			notPressed = true;
 2b0:	8e 2d       	mov	r24, r14
 2b2:	ed cf       	rjmp	.-38     	; 0x28e <button+0x12>

000002b4 <computePrimes>:
	}
	
	
}
//Counts the primes.
void computePrimes(int pos) {
 2b4:	ec 01       	movw	r28, r24
	long n;

	for(n = 1; ; n++) {
 2b6:	c1 2c       	mov	r12, r1
 2b8:	d1 2c       	mov	r13, r1
 2ba:	76 01       	movw	r14, r12
 2bc:	c3 94       	inc	r12
		if (is_prime(n)) {
 2be:	c7 01       	movw	r24, r14
 2c0:	b6 01       	movw	r22, r12
 2c2:	0e 94 a6 00 	call	0x14c	; 0x14c <is_prime>
 2c6:	88 23       	and	r24, r24
 2c8:	29 f0       	breq	.+10     	; 0x2d4 <computePrimes+0x20>
			printAt(n, pos);
 2ca:	ae 01       	movw	r20, r28
 2cc:	c7 01       	movw	r24, r14
 2ce:	b6 01       	movw	r22, r12
 2d0:	0e 94 ee 00 	call	0x1dc	; 0x1dc <printAt>
}
//Counts the primes.
void computePrimes(int pos) {
	long n;

	for(n = 1; ; n++) {
 2d4:	8f ef       	ldi	r24, 0xFF	; 255
 2d6:	c8 1a       	sub	r12, r24
 2d8:	d8 0a       	sbc	r13, r24
 2da:	e8 0a       	sbc	r14, r24
 2dc:	f8 0a       	sbc	r15, r24
		if (is_prime(n)) {
			printAt(n, pos);
		}
	}
 2de:	ef cf       	rjmp	.-34     	; 0x2be <computePrimes+0xa>

000002e0 <blink>:
		if(clockTimmerBlink >= 20)
		{
			clockTimmerBlink = 0;

			//Read the LCD port to see if it is already on.
			if(LCDDR3 != 0)
 2e0:	cf ee       	ldi	r28, 0xEF	; 239
 2e2:	d0 e0       	ldi	r29, 0x00	; 0
				LCDDR3 = 0x0;
			}
			else
			{
				//Turn it on.
				LCDDR3 = 0x1;
 2e4:	11 e0       	ldi	r17, 0x01	; 1
	// Loop to make the LCD blink.
	while(true)
	{
		
		//lock the mutex or else it cat get clock blink var.
		lock(&mutexPrime);
 2e6:	88 e1       	ldi	r24, 0x18	; 24
 2e8:	91 e0       	ldi	r25, 0x01	; 1
 2ea:	0e 94 8f 02 	call	0x51e	; 0x51e <lock>
		
		
		//Will start the blinking if 1 sec have passed. 20 * 50ms = 1s
		if(clockTimmerBlink >= 20)
 2ee:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <clockTimmerBlink>
 2f2:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <clockTimmerBlink+0x1>
 2f6:	44 97       	sbiw	r24, 0x14	; 20
 2f8:	54 f0       	brlt	.+20     	; 0x30e <blink+0x2e>
		{
			clockTimmerBlink = 0;
 2fa:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <clockTimmerBlink+0x1>
 2fe:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <clockTimmerBlink>

			//Read the LCD port to see if it is already on.
			if(LCDDR3 != 0)
 302:	88 81       	ld	r24, Y
 304:	88 23       	and	r24, r24
 306:	11 f0       	breq	.+4      	; 0x30c <blink+0x2c>
			{
				//Turn in off
				LCDDR3 = 0x0;
 308:	18 82       	st	Y, r1
 30a:	01 c0       	rjmp	.+2      	; 0x30e <blink+0x2e>
			}
			else
			{
				//Turn it on.
				LCDDR3 = 0x1;
 30c:	18 83       	st	Y, r17
			}
			
			
		}
		//Unlock the mutex
		unlock(&mutexPrime);
 30e:	88 e1       	ldi	r24, 0x18	; 24
 310:	91 e0       	ldi	r25, 0x01	; 1
 312:	0e 94 b6 02 	call	0x56c	; 0x56c <unlock>
		
	}
 316:	e7 cf       	rjmp	.-50     	; 0x2e6 <blink+0x6>

00000318 <main>:
	}
}

int main() {
	
	CLKPR = 0x80;
 318:	e1 e6       	ldi	r30, 0x61	; 97
 31a:	f0 e0       	ldi	r31, 0x00	; 0
 31c:	80 e8       	ldi	r24, 0x80	; 128
 31e:	80 83       	st	Z, r24
	CLKPR = 0x00;
 320:	10 82       	st	Z, r1
	
	LCDInit();
 322:	0e 94 4d 00 	call	0x9a	; 0x9a <LCDInit>
	spawn(computePrimes, 0);
 326:	60 e0       	ldi	r22, 0x00	; 0
 328:	70 e0       	ldi	r23, 0x00	; 0
 32a:	8a e5       	ldi	r24, 0x5A	; 90
 32c:	91 e0       	ldi	r25, 0x01	; 1
 32e:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <spawn>
	spawn(button, 3);
 332:	63 e0       	ldi	r22, 0x03	; 3
 334:	70 e0       	ldi	r23, 0x00	; 0
 336:	8e e3       	ldi	r24, 0x3E	; 62
 338:	91 e0       	ldi	r25, 0x01	; 1
 33a:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <spawn>
	blink();
 33e:	0e 94 70 01 	call	0x2e0	; 0x2e0 <blink>

00000342 <enqueue>:
	
    initialized = 1;
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 342:	dc 01       	movw	r26, r24
 344:	15 96       	adiw	r26, 0x05	; 5
 346:	1c 92       	st	X, r1
 348:	1e 92       	st	-X, r1
 34a:	14 97       	sbiw	r26, 0x04	; 4
    if (*queue == NULL) {
 34c:	db 01       	movw	r26, r22
 34e:	ed 91       	ld	r30, X+
 350:	fc 91       	ld	r31, X
 352:	11 97       	sbiw	r26, 0x01	; 1
 354:	30 97       	sbiw	r30, 0x00	; 0
 356:	21 f4       	brne	.+8      	; 0x360 <enqueue+0x1e>
        *queue = p;
 358:	8d 93       	st	X+, r24
 35a:	9c 93       	st	X, r25
 35c:	08 95       	ret
    } else {
        thread q = *queue;
        while (q->next)
            q = q->next;
 35e:	f9 01       	movw	r30, r18
    p->next = NULL;
    if (*queue == NULL) {
        *queue = p;
    } else {
        thread q = *queue;
        while (q->next)
 360:	24 81       	ldd	r18, Z+4	; 0x04
 362:	35 81       	ldd	r19, Z+5	; 0x05
 364:	21 15       	cp	r18, r1
 366:	31 05       	cpc	r19, r1
 368:	d1 f7       	brne	.-12     	; 0x35e <enqueue+0x1c>
            q = q->next;
        q->next = p;
 36a:	95 83       	std	Z+5, r25	; 0x05
 36c:	84 83       	std	Z+4, r24	; 0x04
 36e:	08 95       	ret

00000370 <dispatch>:
        while (1) ;  // not much else to do...
    }
    return p;
}

static void dispatch(thread next) {
 370:	cf 93       	push	r28
 372:	df 93       	push	r29
 374:	00 d0       	rcall	.+0      	; 0x376 <dispatch+0x6>
 376:	cd b7       	in	r28, 0x3d	; 61
 378:	de b7       	in	r29, 0x3e	; 62
 37a:	9a 83       	std	Y+2, r25	; 0x02
 37c:	89 83       	std	Y+1, r24	; 0x01
    if (setjmp(current->context) == 0) {
 37e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 382:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 386:	06 96       	adiw	r24, 0x06	; 6
 388:	0e 94 6e 03 	call	0x6dc	; 0x6dc <setjmp>
 38c:	89 2b       	or	r24, r25
 38e:	59 f4       	brne	.+22     	; 0x3a6 <dispatch+0x36>
        current = next;
 390:	89 81       	ldd	r24, Y+1	; 0x01
 392:	9a 81       	ldd	r25, Y+2	; 0x02
 394:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 398:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
        longjmp(next->context,1);
 39c:	61 e0       	ldi	r22, 0x01	; 1
 39e:	70 e0       	ldi	r23, 0x00	; 0
 3a0:	06 96       	adiw	r24, 0x06	; 6
 3a2:	0e 94 8e 03 	call	0x71c	; 0x71c <longjmp>
    }
}
 3a6:	0f 90       	pop	r0
 3a8:	0f 90       	pop	r0
 3aa:	df 91       	pop	r29
 3ac:	cf 91       	pop	r28
 3ae:	08 95       	ret

000003b0 <spawn>:

void spawn(void (* function)(int), int arg) {
 3b0:	cf 93       	push	r28
 3b2:	df 93       	push	r29
 3b4:	00 d0       	rcall	.+0      	; 0x3b6 <spawn+0x6>
 3b6:	cd b7       	in	r28, 0x3d	; 61
 3b8:	de b7       	in	r29, 0x3e	; 62
    thread newp;

    DISABLE();
 3ba:	f8 94       	cli
    if (!initialized) initialize();
 3bc:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <initialized>
 3c0:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <initialized+0x1>
 3c4:	23 2b       	or	r18, r19
 3c6:	a1 f5       	brne	.+104    	; 0x430 <__LOCK_REGION_LENGTH__+0x30>


static void initialize(void) {
    int i;
    for (i=0; i<NTHREADS-1; i++)
        threads[i].next = &threads[i+1];
 3c8:	2e ef       	ldi	r18, 0xFE	; 254
 3ca:	31 e0       	ldi	r19, 0x01	; 1
 3cc:	30 93 96 01 	sts	0x0196, r19	; 0x800196 <threads+0x5>
 3d0:	20 93 95 01 	sts	0x0195, r18	; 0x800195 <threads+0x4>
 3d4:	2b e6       	ldi	r18, 0x6B	; 107
 3d6:	32 e0       	ldi	r19, 0x02	; 2
 3d8:	30 93 03 02 	sts	0x0203, r19	; 0x800203 <threads+0x72>
 3dc:	20 93 02 02 	sts	0x0202, r18	; 0x800202 <threads+0x71>
 3e0:	28 ed       	ldi	r18, 0xD8	; 216
 3e2:	32 e0       	ldi	r19, 0x02	; 2
 3e4:	30 93 70 02 	sts	0x0270, r19	; 0x800270 <threads+0xdf>
 3e8:	20 93 6f 02 	sts	0x026F, r18	; 0x80026f <threads+0xde>
    threads[NTHREADS-1].next = NULL;
 3ec:	10 92 dd 02 	sts	0x02DD, r1	; 0x8002dd <threads+0x14c>
 3f0:	10 92 dc 02 	sts	0x02DC, r1	; 0x8002dc <threads+0x14b>
	
	//Button settings.
	
	//Activate the button
	PORTB = 0x80;
 3f4:	20 e8       	ldi	r18, 0x80	; 128
 3f6:	25 b9       	out	0x05, r18	; 5
	
	//Enabel Interrupt Enabel 1 on the PCIE1
	EIMSK = (1 << PCIE1);
 3f8:	2d bb       	out	0x1d, r18	; 29
	PCMSK1 = (1 << PCINT15);
 3fa:	20 93 6c 00 	sts	0x006C, r18	; 0x80006c <__DATA_REGION_ORIGIN__+0xc>
	
	
	// The clock settings. 
	
	//OC1A is set high on compare match.
	TCCR1A = (1 << COM1A0) | (1 << COM1A1);
 3fe:	20 ec       	ldi	r18, 0xC0	; 192
 400:	20 93 80 00 	sts	0x0080, r18	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	
	// Set timer to CTC and prescale Factor on 1024.
	TCCR1B = (1 << WGM12) | (1 << CS10) |(1 << CS12);
 404:	2d e0       	ldi	r18, 0x0D	; 13
 406:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	
	// Set Value to around 50ms. 8000000/20480 = 390.625
	OCR1A = 391;
 40a:	27 e8       	ldi	r18, 0x87	; 135
 40c:	31 e0       	ldi	r19, 0x01	; 1
 40e:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 412:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	
	//clearing the TCNT1 register during initialization.
	TCNT1 = 0x0;
 416:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 41a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	
	//Compare a match interrupt Enable.
	TIMSK1 = (1 << OCIE1A);
 41e:	22 e0       	ldi	r18, 0x02	; 2
 420:	20 93 6f 00 	sts	0x006F, r18	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
	
    initialized = 1;
 424:	21 e0       	ldi	r18, 0x01	; 1
 426:	30 e0       	ldi	r19, 0x00	; 0
 428:	30 93 1f 01 	sts	0x011F, r19	; 0x80011f <initialized+0x1>
 42c:	20 93 1e 01 	sts	0x011E, r18	; 0x80011e <initialized>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 430:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <freeQ>
 434:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <freeQ+0x1>
 438:	3a 83       	std	Y+2, r19	; 0x02
 43a:	29 83       	std	Y+1, r18	; 0x01
    if (*queue) {
 43c:	23 2b       	or	r18, r19
 43e:	a9 f0       	breq	.+42     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
        *queue = (*queue)->next;
 440:	e9 81       	ldd	r30, Y+1	; 0x01
 442:	fa 81       	ldd	r31, Y+2	; 0x02
 444:	44 81       	ldd	r20, Z+4	; 0x04
 446:	55 81       	ldd	r21, Z+5	; 0x05
 448:	50 93 03 01 	sts	0x0103, r21	; 0x800103 <freeQ+0x1>
 44c:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <freeQ>

    DISABLE();
    if (!initialized) initialize();

    newp = dequeue(&freeQ);
    newp->function = function;
 450:	91 83       	std	Z+1, r25	; 0x01
 452:	80 83       	st	Z, r24
    newp->arg = arg;
 454:	73 83       	std	Z+3, r23	; 0x03
 456:	62 83       	std	Z+2, r22	; 0x02
    newp->next = NULL;
 458:	15 82       	std	Z+5, r1	; 0x05
 45a:	14 82       	std	Z+4, r1	; 0x04
    if (setjmp(newp->context) == 1) {
 45c:	cf 01       	movw	r24, r30
 45e:	06 96       	adiw	r24, 0x06	; 6
 460:	0e 94 6e 03 	call	0x6dc	; 0x6dc <setjmp>
 464:	01 97       	sbiw	r24, 0x01	; 1
 466:	49 f5       	brne	.+82     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
 468:	01 c0       	rjmp	.+2      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 46a:	ff cf       	rjmp	.-2      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
        ENABLE();
 46c:	78 94       	sei
        current->function(current->arg);
 46e:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__data_start>
 472:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__data_start+0x1>
 476:	ed 91       	ld	r30, X+
 478:	fc 91       	ld	r31, X
 47a:	11 97       	sbiw	r26, 0x01	; 1
 47c:	12 96       	adiw	r26, 0x02	; 2
 47e:	8d 91       	ld	r24, X+
 480:	9c 91       	ld	r25, X
 482:	13 97       	sbiw	r26, 0x03	; 3
 484:	09 95       	icall
        DISABLE();
 486:	f8 94       	cli
        enqueue(current, &freeQ);
 488:	62 e0       	ldi	r22, 0x02	; 2
 48a:	71 e0       	ldi	r23, 0x01	; 1
 48c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 490:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 494:	0e 94 a1 01 	call	0x342	; 0x342 <enqueue>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 498:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <readyQ>
 49c:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <readyQ+0x1>
    if (*queue) {
 4a0:	00 97       	sbiw	r24, 0x00	; 0
 4a2:	51 f0       	breq	.+20     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
        *queue = (*queue)->next;
 4a4:	fc 01       	movw	r30, r24
 4a6:	24 81       	ldd	r18, Z+4	; 0x04
 4a8:	35 81       	ldd	r19, Z+5	; 0x05
 4aa:	30 93 21 01 	sts	0x0121, r19	; 0x800121 <readyQ+0x1>
 4ae:	20 93 20 01 	sts	0x0120, r18	; 0x800120 <readyQ>
    if (setjmp(newp->context) == 1) {
        ENABLE();
        current->function(current->arg);
        DISABLE();
        enqueue(current, &freeQ);
        dispatch(dequeue(&readyQ));
 4b2:	0e 94 b8 01 	call	0x370	; 0x370 <dispatch>
 4b6:	01 c0       	rjmp	.+2      	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
 4b8:	ff cf       	rjmp	.-2      	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
    }
    SETSTACK(&newp->context, &newp->stack);
 4ba:	e9 81       	ldd	r30, Y+1	; 0x01
 4bc:	fa 81       	ldd	r31, Y+2	; 0x02
 4be:	36 96       	adiw	r30, 0x06	; 6
 4c0:	89 81       	ldd	r24, Y+1	; 0x01
 4c2:	9a 81       	ldd	r25, Y+2	; 0x02
 4c4:	87 59       	subi	r24, 0x97	; 151
 4c6:	9f 4f       	sbci	r25, 0xFF	; 255
 4c8:	91 8b       	std	Z+17, r25	; 0x11
 4ca:	80 8b       	std	Z+16, r24	; 0x10
 4cc:	93 8b       	std	Z+19, r25	; 0x13
 4ce:	82 8b       	std	Z+18, r24	; 0x12

    enqueue(newp, &readyQ);
 4d0:	60 e2       	ldi	r22, 0x20	; 32
 4d2:	71 e0       	ldi	r23, 0x01	; 1
 4d4:	89 81       	ldd	r24, Y+1	; 0x01
 4d6:	9a 81       	ldd	r25, Y+2	; 0x02
 4d8:	0e 94 a1 01 	call	0x342	; 0x342 <enqueue>
    ENABLE();
 4dc:	78 94       	sei
}
 4de:	0f 90       	pop	r0
 4e0:	0f 90       	pop	r0
 4e2:	df 91       	pop	r29
 4e4:	cf 91       	pop	r28
 4e6:	08 95       	ret

000004e8 <yield>:

void yield(void) {
	ENABLE();
 4e8:	78 94       	sei
	enqueue(current, &readyQ);
 4ea:	60 e2       	ldi	r22, 0x20	; 32
 4ec:	71 e0       	ldi	r23, 0x01	; 1
 4ee:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 4f2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 4f6:	0e 94 a1 01 	call	0x342	; 0x342 <enqueue>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 4fa:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <readyQ>
 4fe:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <readyQ+0x1>
    if (*queue) {
 502:	00 97       	sbiw	r24, 0x00	; 0
 504:	59 f0       	breq	.+22     	; 0x51c <__stack+0x1d>
        *queue = (*queue)->next;
 506:	fc 01       	movw	r30, r24
 508:	24 81       	ldd	r18, Z+4	; 0x04
 50a:	35 81       	ldd	r19, Z+5	; 0x05
 50c:	30 93 21 01 	sts	0x0121, r19	; 0x800121 <readyQ+0x1>
 510:	20 93 20 01 	sts	0x0120, r18	; 0x800120 <readyQ>
}

void yield(void) {
	ENABLE();
	enqueue(current, &readyQ);
	dispatch(dequeue(&readyQ));
 514:	0e 94 b8 01 	call	0x370	; 0x370 <dispatch>
	DISABLE();
 518:	f8 94       	cli
}
 51a:	08 95       	ret
 51c:	ff cf       	rjmp	.-2      	; 0x51c <__stack+0x1d>

0000051e <lock>:

void lock(mutex *m) 
{
	DISABLE();
 51e:	f8 94       	cli
	
	//Take the mutex
	if (m->locked == 0)
 520:	fc 01       	movw	r30, r24
 522:	20 81       	ld	r18, Z
 524:	31 81       	ldd	r19, Z+1	; 0x01
 526:	23 2b       	or	r18, r19
 528:	29 f4       	brne	.+10     	; 0x534 <lock+0x16>
	{
		m->locked = 1;
 52a:	21 e0       	ldi	r18, 0x01	; 1
 52c:	30 e0       	ldi	r19, 0x00	; 0
 52e:	31 83       	std	Z+1, r19	; 0x01
 530:	20 83       	st	Z, r18
 532:	1a c0       	rjmp	.+52     	; 0x568 <lock+0x4a>
	}
	//Wait if it is already locked.
	else
	{
		enqueue(current, &(m->waitQ));
 534:	bc 01       	movw	r22, r24
 536:	6e 5f       	subi	r22, 0xFE	; 254
 538:	7f 4f       	sbci	r23, 0xFF	; 255
 53a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 53e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 542:	0e 94 a1 01 	call	0x342	; 0x342 <enqueue>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 546:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <readyQ>
 54a:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <readyQ+0x1>
    if (*queue) {
 54e:	00 97       	sbiw	r24, 0x00	; 0
 550:	51 f0       	breq	.+20     	; 0x566 <lock+0x48>
        *queue = (*queue)->next;
 552:	fc 01       	movw	r30, r24
 554:	24 81       	ldd	r18, Z+4	; 0x04
 556:	35 81       	ldd	r19, Z+5	; 0x05
 558:	30 93 21 01 	sts	0x0121, r19	; 0x800121 <readyQ+0x1>
 55c:	20 93 20 01 	sts	0x0120, r18	; 0x800120 <readyQ>
	}
	//Wait if it is already locked.
	else
	{
		enqueue(current, &(m->waitQ));
		dispatch(dequeue(&readyQ));
 560:	0e 94 b8 01 	call	0x370	; 0x370 <dispatch>
 564:	01 c0       	rjmp	.+2      	; 0x568 <lock+0x4a>
 566:	ff cf       	rjmp	.-2      	; 0x566 <lock+0x48>
	}
	ENABLE();
 568:	78 94       	sei
 56a:	08 95       	ret

0000056c <unlock>:

}

void unlock(mutex *m) 
{
 56c:	cf 93       	push	r28
 56e:	df 93       	push	r29
	DISABLE();
 570:	f8 94       	cli
	
	
	//Check it it is non empty.
	if (m->waitQ != NULL) 
 572:	fc 01       	movw	r30, r24
 574:	22 81       	ldd	r18, Z+2	; 0x02
 576:	33 81       	ldd	r19, Z+3	; 0x03
 578:	23 2b       	or	r18, r19
 57a:	b1 f0       	breq	.+44     	; 0x5a8 <unlock+0x3c>
 57c:	ec 01       	movw	r28, r24
	{
		enqueue(current, &readyQ);
 57e:	60 e2       	ldi	r22, 0x20	; 32
 580:	71 e0       	ldi	r23, 0x01	; 1
 582:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 586:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 58a:	0e 94 a1 01 	call	0x342	; 0x342 <enqueue>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 58e:	8a 81       	ldd	r24, Y+2	; 0x02
 590:	9b 81       	ldd	r25, Y+3	; 0x03
    if (*queue) {
 592:	00 97       	sbiw	r24, 0x00	; 0
 594:	41 f0       	breq	.+16     	; 0x5a6 <unlock+0x3a>
        *queue = (*queue)->next;
 596:	fc 01       	movw	r30, r24
 598:	24 81       	ldd	r18, Z+4	; 0x04
 59a:	35 81       	ldd	r19, Z+5	; 0x05
 59c:	3b 83       	std	Y+3, r19	; 0x03
 59e:	2a 83       	std	Y+2, r18	; 0x02
	
	//Check it it is non empty.
	if (m->waitQ != NULL) 
	{
		enqueue(current, &readyQ);
		dispatch(dequeue(&(m->waitQ)));
 5a0:	0e 94 b8 01 	call	0x370	; 0x370 <dispatch>
 5a4:	04 c0       	rjmp	.+8      	; 0x5ae <unlock+0x42>
 5a6:	ff cf       	rjmp	.-2      	; 0x5a6 <unlock+0x3a>
	} 
	//Realese the mutex.
	else
	{
		m->locked = 0;
 5a8:	fc 01       	movw	r30, r24
 5aa:	11 82       	std	Z+1, r1	; 0x01
 5ac:	10 82       	st	Z, r1
	}
	
	ENABLE();
 5ae:	78 94       	sei
}
 5b0:	df 91       	pop	r29
 5b2:	cf 91       	pop	r28
 5b4:	08 95       	ret

000005b6 <__vector_3>:

//Macro for listening for the button.
ISR(PCINT1_vect) 
{
 5b6:	1f 92       	push	r1
 5b8:	0f 92       	push	r0
 5ba:	0f b6       	in	r0, 0x3f	; 63
 5bc:	0f 92       	push	r0
 5be:	11 24       	eor	r1, r1
 5c0:	2f 93       	push	r18
 5c2:	3f 93       	push	r19
 5c4:	4f 93       	push	r20
 5c6:	5f 93       	push	r21
 5c8:	6f 93       	push	r22
 5ca:	7f 93       	push	r23
 5cc:	8f 93       	push	r24
 5ce:	9f 93       	push	r25
 5d0:	af 93       	push	r26
 5d2:	bf 93       	push	r27
 5d4:	ef 93       	push	r30
 5d6:	ff 93       	push	r31
	if (PINB >> 7 == 0) 
 5d8:	1f 9b       	sbis	0x03, 7	; 3
	{
		yield();
 5da:	0e 94 74 02 	call	0x4e8	; 0x4e8 <yield>
	}
}
 5de:	ff 91       	pop	r31
 5e0:	ef 91       	pop	r30
 5e2:	bf 91       	pop	r27
 5e4:	af 91       	pop	r26
 5e6:	9f 91       	pop	r25
 5e8:	8f 91       	pop	r24
 5ea:	7f 91       	pop	r23
 5ec:	6f 91       	pop	r22
 5ee:	5f 91       	pop	r21
 5f0:	4f 91       	pop	r20
 5f2:	3f 91       	pop	r19
 5f4:	2f 91       	pop	r18
 5f6:	0f 90       	pop	r0
 5f8:	0f be       	out	0x3f, r0	; 63
 5fa:	0f 90       	pop	r0
 5fc:	1f 90       	pop	r1
 5fe:	18 95       	reti

00000600 <__vector_7>:

//Macro for listening for the clock.
ISR(TIMER1_COMPA_vect) 
{
 600:	1f 92       	push	r1
 602:	0f 92       	push	r0
 604:	0f b6       	in	r0, 0x3f	; 63
 606:	0f 92       	push	r0
 608:	11 24       	eor	r1, r1
 60a:	2f 93       	push	r18
 60c:	3f 93       	push	r19
 60e:	4f 93       	push	r20
 610:	5f 93       	push	r21
 612:	6f 93       	push	r22
 614:	7f 93       	push	r23
 616:	8f 93       	push	r24
 618:	9f 93       	push	r25
 61a:	af 93       	push	r26
 61c:	bf 93       	push	r27
 61e:	ef 93       	push	r30
 620:	ff 93       	push	r31
	yield();
 622:	0e 94 74 02 	call	0x4e8	; 0x4e8 <yield>
	clockTimmerBlink++;
 626:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <clockTimmerBlink>
 62a:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <clockTimmerBlink+0x1>
 62e:	01 96       	adiw	r24, 0x01	; 1
 630:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <clockTimmerBlink+0x1>
 634:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <clockTimmerBlink>
 638:	ff 91       	pop	r31
 63a:	ef 91       	pop	r30
 63c:	bf 91       	pop	r27
 63e:	af 91       	pop	r26
 640:	9f 91       	pop	r25
 642:	8f 91       	pop	r24
 644:	7f 91       	pop	r23
 646:	6f 91       	pop	r22
 648:	5f 91       	pop	r21
 64a:	4f 91       	pop	r20
 64c:	3f 91       	pop	r19
 64e:	2f 91       	pop	r18
 650:	0f 90       	pop	r0
 652:	0f be       	out	0x3f, r0	; 63
 654:	0f 90       	pop	r0
 656:	1f 90       	pop	r1
 658:	18 95       	reti

0000065a <__divmodsi4>:
 65a:	05 2e       	mov	r0, r21
 65c:	97 fb       	bst	r25, 7
 65e:	1e f4       	brtc	.+6      	; 0x666 <__divmodsi4+0xc>
 660:	00 94       	com	r0
 662:	0e 94 44 03 	call	0x688	; 0x688 <__negsi2>
 666:	57 fd       	sbrc	r21, 7
 668:	07 d0       	rcall	.+14     	; 0x678 <__divmodsi4_neg2>
 66a:	0e 94 4c 03 	call	0x698	; 0x698 <__udivmodsi4>
 66e:	07 fc       	sbrc	r0, 7
 670:	03 d0       	rcall	.+6      	; 0x678 <__divmodsi4_neg2>
 672:	4e f4       	brtc	.+18     	; 0x686 <__divmodsi4_exit>
 674:	0c 94 44 03 	jmp	0x688	; 0x688 <__negsi2>

00000678 <__divmodsi4_neg2>:
 678:	50 95       	com	r21
 67a:	40 95       	com	r20
 67c:	30 95       	com	r19
 67e:	21 95       	neg	r18
 680:	3f 4f       	sbci	r19, 0xFF	; 255
 682:	4f 4f       	sbci	r20, 0xFF	; 255
 684:	5f 4f       	sbci	r21, 0xFF	; 255

00000686 <__divmodsi4_exit>:
 686:	08 95       	ret

00000688 <__negsi2>:
 688:	90 95       	com	r25
 68a:	80 95       	com	r24
 68c:	70 95       	com	r23
 68e:	61 95       	neg	r22
 690:	7f 4f       	sbci	r23, 0xFF	; 255
 692:	8f 4f       	sbci	r24, 0xFF	; 255
 694:	9f 4f       	sbci	r25, 0xFF	; 255
 696:	08 95       	ret

00000698 <__udivmodsi4>:
 698:	a1 e2       	ldi	r26, 0x21	; 33
 69a:	1a 2e       	mov	r1, r26
 69c:	aa 1b       	sub	r26, r26
 69e:	bb 1b       	sub	r27, r27
 6a0:	fd 01       	movw	r30, r26
 6a2:	0d c0       	rjmp	.+26     	; 0x6be <__udivmodsi4_ep>

000006a4 <__udivmodsi4_loop>:
 6a4:	aa 1f       	adc	r26, r26
 6a6:	bb 1f       	adc	r27, r27
 6a8:	ee 1f       	adc	r30, r30
 6aa:	ff 1f       	adc	r31, r31
 6ac:	a2 17       	cp	r26, r18
 6ae:	b3 07       	cpc	r27, r19
 6b0:	e4 07       	cpc	r30, r20
 6b2:	f5 07       	cpc	r31, r21
 6b4:	20 f0       	brcs	.+8      	; 0x6be <__udivmodsi4_ep>
 6b6:	a2 1b       	sub	r26, r18
 6b8:	b3 0b       	sbc	r27, r19
 6ba:	e4 0b       	sbc	r30, r20
 6bc:	f5 0b       	sbc	r31, r21

000006be <__udivmodsi4_ep>:
 6be:	66 1f       	adc	r22, r22
 6c0:	77 1f       	adc	r23, r23
 6c2:	88 1f       	adc	r24, r24
 6c4:	99 1f       	adc	r25, r25
 6c6:	1a 94       	dec	r1
 6c8:	69 f7       	brne	.-38     	; 0x6a4 <__udivmodsi4_loop>
 6ca:	60 95       	com	r22
 6cc:	70 95       	com	r23
 6ce:	80 95       	com	r24
 6d0:	90 95       	com	r25
 6d2:	9b 01       	movw	r18, r22
 6d4:	ac 01       	movw	r20, r24
 6d6:	bd 01       	movw	r22, r26
 6d8:	cf 01       	movw	r24, r30
 6da:	08 95       	ret

000006dc <setjmp>:
 6dc:	dc 01       	movw	r26, r24
 6de:	2d 92       	st	X+, r2
 6e0:	3d 92       	st	X+, r3
 6e2:	4d 92       	st	X+, r4
 6e4:	5d 92       	st	X+, r5
 6e6:	6d 92       	st	X+, r6
 6e8:	7d 92       	st	X+, r7
 6ea:	8d 92       	st	X+, r8
 6ec:	9d 92       	st	X+, r9
 6ee:	ad 92       	st	X+, r10
 6f0:	bd 92       	st	X+, r11
 6f2:	cd 92       	st	X+, r12
 6f4:	dd 92       	st	X+, r13
 6f6:	ed 92       	st	X+, r14
 6f8:	fd 92       	st	X+, r15
 6fa:	0d 93       	st	X+, r16
 6fc:	1d 93       	st	X+, r17
 6fe:	cd 93       	st	X+, r28
 700:	dd 93       	st	X+, r29
 702:	ff 91       	pop	r31
 704:	ef 91       	pop	r30
 706:	8d b7       	in	r24, 0x3d	; 61
 708:	8d 93       	st	X+, r24
 70a:	8e b7       	in	r24, 0x3e	; 62
 70c:	8d 93       	st	X+, r24
 70e:	8f b7       	in	r24, 0x3f	; 63
 710:	8d 93       	st	X+, r24
 712:	ed 93       	st	X+, r30
 714:	fd 93       	st	X+, r31
 716:	88 27       	eor	r24, r24
 718:	99 27       	eor	r25, r25
 71a:	09 94       	ijmp

0000071c <longjmp>:
 71c:	dc 01       	movw	r26, r24
 71e:	cb 01       	movw	r24, r22
 720:	81 30       	cpi	r24, 0x01	; 1
 722:	91 05       	cpc	r25, r1
 724:	81 1d       	adc	r24, r1
 726:	2d 90       	ld	r2, X+
 728:	3d 90       	ld	r3, X+
 72a:	4d 90       	ld	r4, X+
 72c:	5d 90       	ld	r5, X+
 72e:	6d 90       	ld	r6, X+
 730:	7d 90       	ld	r7, X+
 732:	8d 90       	ld	r8, X+
 734:	9d 90       	ld	r9, X+
 736:	ad 90       	ld	r10, X+
 738:	bd 90       	ld	r11, X+
 73a:	cd 90       	ld	r12, X+
 73c:	dd 90       	ld	r13, X+
 73e:	ed 90       	ld	r14, X+
 740:	fd 90       	ld	r15, X+
 742:	0d 91       	ld	r16, X+
 744:	1d 91       	ld	r17, X+
 746:	cd 91       	ld	r28, X+
 748:	dd 91       	ld	r29, X+
 74a:	ed 91       	ld	r30, X+
 74c:	fd 91       	ld	r31, X+
 74e:	0d 90       	ld	r0, X+
 750:	f8 94       	cli
 752:	fe bf       	out	0x3e, r31	; 62
 754:	0f be       	out	0x3f, r0	; 63
 756:	ed bf       	out	0x3d, r30	; 61
 758:	ed 91       	ld	r30, X+
 75a:	fd 91       	ld	r31, X+
 75c:	09 94       	ijmp

0000075e <_exit>:
 75e:	f8 94       	cli

00000760 <__stop_program>:
 760:	ff cf       	rjmp	.-2      	; 0x760 <__stop_program>
